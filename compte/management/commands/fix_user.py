
from django.core.management.base import BaseCommand
from account.models import Account
from client.models import Client

class Command(BaseCommand):
    help = 'Corrige les probl√®mes d\'un utilisateur (active le compte et cr√©e le profil Client)'

    def add_arguments(self, parser):
        parser.add_argument('email', type=str, help='Email de l\'utilisateur √† corriger')

    def handle(self, *args, **options):
        email = options['email']
        
        try:
            # R√©cup√©rer l'utilisateur
            user = Account.objects.get(email=email)
            self.stdout.write(f'Utilisateur trouv√©: {user.email}')
            
            # 1. Activer le compte
            if not user.is_active:
                user.is_active = True
                user.save()
                self.stdout.write(
                    self.style.SUCCESS('‚úì Compte activ√© avec succ√®s')
                )
            else:
                self.stdout.write(
                    self.style.WARNING('‚ö† Le compte √©tait d√©j√† actif')
                )
            
            # 2. Cr√©er le profil Client s'il n'existe pas
            try:
                client = Client.objects.get(user=user)
                self.stdout.write(
                    self.style.WARNING('‚ö† Le profil Client existe d√©j√†')
                )
                self.stdout.write(f'  - Nom: {client.nom}')
                self.stdout.write(f'  - Type utilisateur: {client.get_type_utilisateur_display()}')
            except Client.DoesNotExist:
                # Cr√©er le profil Client
                client = Client.objects.create(
                    user=user,
                    nom=user.email,
                    type_utilisateur='locataire',  # Valeur par d√©faut
                )
                self.stdout.write(
                    self.style.SUCCESS('‚úì Profil Client cr√©√© avec succ√®s')
                )
                self.stdout.write(f'  - Nom: {client.nom}')
                self.stdout.write(f'  - Type utilisateur: {client.get_type_utilisateur_display()}')
            
            # 3. V√©rification finale
            self.stdout.write('\n--- √âtat final de l\'utilisateur ---')
            self.stdout.write(f'Email: {user.email}')
            self.stdout.write(f'Nom: {user.first_name} {user.last_name}')
            self.stdout.write(f'Actif: {user.is_active}')
            
            try:
                client = Client.objects.get(user=user)
                self.stdout.write(f'Profil Client: ‚úì Existe')
                self.stdout.write(f'Type utilisateur: {client.get_type_utilisateur_display()}')
            except Client.DoesNotExist:
                self.stdout.write(f'Profil Client: ‚úó N\'existe pas')
            
            self.stdout.write(
                self.style.SUCCESS('\nüéâ Tous les probl√®mes ont √©t√© corrig√©s ! L\'utilisateur peut maintenant se connecter.')
            )
                
        except Account.DoesNotExist:
            self.stdout.write(
                self.style.ERROR(f'‚úó Aucun utilisateur trouv√© avec l\'email: {email}')
            )
